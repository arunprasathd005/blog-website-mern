{"ast":null,"code":"var _jsxFileName = \"E:\\\\mern stack\\\\blog app mern\\\\frontend\\\\src\\\\pages\\\\IndexPage.js\",\n  _s = $RefreshSig$();\n// import { useEffect, useState } from 'react';\n// import Post from '../Post';\n\n// const IndexPage = () => {\n//   const[posts,setPosts] =useState([]);\n//   useEffect(()=>{\n//     fetch('/post').then(response=>{\n//       response.json().then(posts=>{\n//         console.log(posts);\n//       });\n//     });\n//   })\n//   return (\n//     <>\n//        {posts.length>0 && posts.map(post=>(\n//         <Post {...post}/>\n//        ))\n\n//        } \n//     </>\n//   );\n// }\n\n// export default IndexPage\nimport { useEffect, useState } from 'react';\nimport Post from '../Post';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst IndexPage = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    // Fetch posts from the backend\n    fetch('/post').then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(posts => {\n      setPosts(posts); // Update the state with the fetched posts\n    }).catch(error => {\n      console.error('Error fetching posts:', error);\n    });\n  }, []); // Add an empty dependency array to run this effect only once on mount\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: posts.length > 0 ? posts.map(post => /*#__PURE__*/_jsxDEV(Post, {\n      ...post\n    }, post._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }, this) // Ensure to add a unique key prop\n    ) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No posts available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this) // Optional: Show a message if there are no posts\n  }, void 0, false);\n};\n_s(IndexPage, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = IndexPage;\nexport default IndexPage;\nvar _c;\n$RefreshReg$(_c, \"IndexPage\");","map":{"version":3,"names":["useEffect","useState","Post","jsxDEV","_jsxDEV","Fragment","_Fragment","IndexPage","_s","posts","setPosts","fetch","then","response","ok","Error","json","catch","error","console","children","length","map","post","_id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/mern stack/blog app mern/frontend/src/pages/IndexPage.js"],"sourcesContent":["\r\n// import { useEffect, useState } from 'react';\r\n// import Post from '../Post';\r\n\r\n// const IndexPage = () => {\r\n//   const[posts,setPosts] =useState([]);\r\n//   useEffect(()=>{\r\n//     fetch('/post').then(response=>{\r\n//       response.json().then(posts=>{\r\n//         console.log(posts);\r\n//       });\r\n//     });\r\n//   })\r\n//   return (\r\n//     <>\r\n//        {posts.length>0 && posts.map(post=>(\r\n//         <Post {...post}/>\r\n//        ))\r\n\r\n//        } \r\n//     </>\r\n//   );\r\n// }\r\n\r\n// export default IndexPage\r\nimport { useEffect, useState } from 'react';\r\nimport Post from '../Post';\r\n\r\nconst IndexPage = () => {\r\n  const [posts, setPosts] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Fetch posts from the backend\r\n    fetch('/post')\r\n      .then(response => {\r\n        if (!response.ok) {\r\n          throw new Error('Network response was not ok');\r\n        }\r\n        return response.json();\r\n      })\r\n      .then(posts => {\r\n        setPosts(posts); // Update the state with the fetched posts\r\n      })\r\n      .catch(error => {\r\n        console.error('Error fetching posts:', error);\r\n      });\r\n  }, []); // Add an empty dependency array to run this effect only once on mount\r\n\r\n  return (\r\n    <>\r\n      {posts.length > 0 ? (\r\n        posts.map(post => (\r\n          <Post key={post._id} {...post} /> // Ensure to add a unique key prop\r\n        ))\r\n      ) : (\r\n        <p>No posts available.</p> // Optional: Show a message if there are no posts\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default IndexPage;\r\n"],"mappings":";;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,IAAI,MAAM,SAAS;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE3B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAEtCD,SAAS,CAAC,MAAM;IACd;IACAW,KAAK,CAAC,OAAO,CAAC,CACXC,IAAI,CAACC,QAAQ,IAAI;MAChB,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;MAChD;MACA,OAAOF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACxB,CAAC,CAAC,CACDJ,IAAI,CAACH,KAAK,IAAI;MACbC,QAAQ,CAACD,KAAK,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CACDQ,KAAK,CAACC,KAAK,IAAI;MACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC/C,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEd,OAAA,CAAAE,SAAA;IAAAc,QAAA,EACGX,KAAK,CAACY,MAAM,GAAG,CAAC,GACfZ,KAAK,CAACa,GAAG,CAACC,IAAI,iBACZnB,OAAA,CAACF,IAAI;MAAA,GAAoBqB;IAAI,GAAlBA,IAAI,CAACC,GAAG;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAa,CAAC,CAAC;IACnC,CAAC,gBAEFxB,OAAA;MAAAgB,QAAA,EAAG;IAAmB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,CAAC;EAC5B,gBACD,CAAC;AAEP,CAAC;AAACpB,EAAA,CA/BID,SAAS;AAAAsB,EAAA,GAATtB,SAAS;AAiCf,eAAeA,SAAS;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}