{"ast":null,"code":"async function login(ev) {\n  ev.preventDefault();\n  const response = await fetch('http://localhost:4000/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      username,\n      password\n    })\n  });\n  if (response.ok) {\n    const data = await response.json();\n    // Store the token in local storage or handle it as needed\n    localStorage.setItem('token', data.token);\n    console.log('Login successful:', data);\n  } else {\n    console.error('Login failed:', response.statusText);\n  }\n}","map":{"version":3,"names":["login","ev","preventDefault","response","fetch","method","headers","body","JSON","stringify","username","password","ok","data","json","localStorage","setItem","token","console","log","error","statusText"],"sources":["E:/mern stack/blog app mern/frontend/src/pages/Loginpage.js"],"sourcesContent":["async function login(ev) {\r\n  ev.preventDefault();\r\n  const response = await fetch('http://localhost:4000/login', {\r\n    method: 'POST',\r\n    headers: { 'Content-Type': 'application/json' },\r\n    body: JSON.stringify({ username, password }),\r\n  });\r\n\r\n  if (response.ok) {\r\n    const data = await response.json();\r\n    // Store the token in local storage or handle it as needed\r\n    localStorage.setItem('token', data.token); \r\n    console.log('Login successful:', data);\r\n  } else {\r\n    console.error('Login failed:', response.statusText);\r\n  }\r\n}\r\n"],"mappings":"AAAA,eAAeA,KAAKA,CAACC,EAAE,EAAE;EACvBA,EAAE,CAACC,cAAc,CAAC,CAAC;EACnB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,6BAA6B,EAAE;IAC1DC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEC,QAAQ;MAAEC;IAAS,CAAC;EAC7C,CAAC,CAAC;EAEF,IAAIR,QAAQ,CAACS,EAAE,EAAE;IACf,MAAMC,IAAI,GAAG,MAAMV,QAAQ,CAACW,IAAI,CAAC,CAAC;IAClC;IACAC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAACI,KAAK,CAAC;IACzCC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEN,IAAI,CAAC;EACxC,CAAC,MAAM;IACLK,OAAO,CAACE,KAAK,CAAC,eAAe,EAAEjB,QAAQ,CAACkB,UAAU,CAAC;EACrD;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}